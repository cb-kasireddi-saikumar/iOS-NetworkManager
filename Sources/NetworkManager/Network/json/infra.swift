// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Infra.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Endpoints: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Endpoints"

  public var appUrls: [String] = []

  public var modules: [Module] = []

  public var imgPath: [FormatMap] = []

  public var auth: [AuthMap] = []

  public var lastUpdatedTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.appUrls)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.modules)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.imgPath)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.auth)
      case 5: try decoder.decodeSingularInt64Field(value: &self.lastUpdatedTime)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.appUrls, fieldNumber: 1)
    }
    if !self.modules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modules, fieldNumber: 2)
    }
    if !self.imgPath.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imgPath, fieldNumber: 3)
    }
    if !self.auth.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.auth, fieldNumber: 4)
    }
    if self.lastUpdatedTime != 0 {
      try visitor.visitSingularInt64Field(value: self.lastUpdatedTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AuthMap: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AuthMap"

  public var key: String {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  public var auth: Auth {
    get {return _storage._auth ?? Auth()}
    set {_uniqueStorage()._auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  public var hasAuth: Bool {return _storage._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  public mutating func clearAuth() {_storage._auth = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._auth)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._key.isEmpty {
        try visitor.visitSingularStringField(value: _storage._key, fieldNumber: 1)
      }
      if let v = _storage._auth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Auth: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Auth"

  public var enabled: Bool = false

  public var authType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enabled)
      case 2: try decoder.decodeSingularStringField(value: &self.authType)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.authType.isEmpty {
      try visitor.visitSingularStringField(value: self.authType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Module: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Module"

  public var uri: String = String()

  public var version: String = String()

  public var maxFails: Int32 = 0

  public var inUse: Int32 = 0

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uri)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeSingularInt32Field(value: &self.maxFails)
      case 4: try decoder.decodeSingularInt32Field(value: &self.inUse)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if self.maxFails != 0 {
      try visitor.visitSingularInt32Field(value: self.maxFails, fieldNumber: 3)
    }
    if self.inUse != 0 {
      try visitor.visitSingularInt32Field(value: self.inUse, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct SyncDB: SwiftProtobuf.Message {
  public static let protoMessageName: String = "SyncDB"

  public var epFetch: Bool = false

  public var settingsFetch: Bool = false

  public var lastUpdatedEp: Int64 = 0

  public var lastUpdatedSettings: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.epFetch)
      case 2: try decoder.decodeSingularBoolField(value: &self.settingsFetch)
      case 3: try decoder.decodeSingularInt64Field(value: &self.lastUpdatedEp)
      case 4: try decoder.decodeSingularInt64Field(value: &self.lastUpdatedSettings)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epFetch != false {
      try visitor.visitSingularBoolField(value: self.epFetch, fieldNumber: 1)
    }
    if self.settingsFetch != false {
      try visitor.visitSingularBoolField(value: self.settingsFetch, fieldNumber: 2)
    }
    if self.lastUpdatedEp != 0 {
      try visitor.visitSingularInt64Field(value: self.lastUpdatedEp, fieldNumber: 3)
    }
    if self.lastUpdatedSettings != 0 {
      try visitor.visitSingularInt64Field(value: self.lastUpdatedSettings, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct RefreshRate: SwiftProtobuf.Message {
  public static let protoMessageName: String = "RefreshRate"

  public var key: String = String()

  public var value: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularInt32Field(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct FeatureToggle: SwiftProtobuf.Message {
  public static let protoMessageName: String = "FeatureToggle"

  public var key: String = String()

  public var value: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularBoolField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AnalyticsData: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AnalyticsData"

  public var key: String = String()

  public var enabled: Bool = false

  public var id: String = String()

  public var secret: String = String()

  public var others: [FormatMap] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularBoolField(value: &self.enabled)
      case 3: try decoder.decodeSingularStringField(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.secret)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.others)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    if !self.secret.isEmpty {
      try visitor.visitSingularStringField(value: self.secret, fieldNumber: 4)
    }
    if !self.others.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.others, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct SponsoredData: SwiftProtobuf.Message {
  public static let protoMessageName: String = "SponsoredData"

  public var key: String = String()

  public var title: String = String()

  public var link: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.link)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Cache: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Cache"

  public var burstCacheID: String = String()

  public var enableDmp: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.burstCacheID)
      case 2: try decoder.decodeSingularBoolField(value: &self.enableDmp)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.burstCacheID.isEmpty {
      try visitor.visitSingularStringField(value: self.burstCacheID, fieldNumber: 1)
    }
    if self.enableDmp != false {
      try visitor.visitSingularBoolField(value: self.enableDmp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Settings: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Settings"

  public var refreshRates: [RefreshRate] {
    get {return _storage._refreshRates}
    set {_uniqueStorage()._refreshRates = newValue}
  }

  public var featureToggles: [FeatureToggle] {
    get {return _storage._featureToggles}
    set {_uniqueStorage()._featureToggles = newValue}
  }

  public var analytics: [AnalyticsData] {
    get {return _storage._analytics}
    set {_uniqueStorage()._analytics = newValue}
  }

  public var cache: Cache {
    get {return _storage._cache ?? Cache()}
    set {_uniqueStorage()._cache = newValue}
  }
  /// Returns true if `cache` has been explicitly set.
  public var hasCache: Bool {return _storage._cache != nil}
  /// Clears the value of `cache`. Subsequent reads from it will return its default value.
  public mutating func clearCache() {_storage._cache = nil}

  public var videos: [FormatMap] {
    get {return _storage._videos}
    set {_uniqueStorage()._videos = newValue}
  }

  public var sponsors: [SponsoredData] {
    get {return _storage._sponsors}
    set {_uniqueStorage()._sponsors = newValue}
  }

  public var lastUpdateTime: Int64 {
    get {return _storage._lastUpdateTime}
    set {_uniqueStorage()._lastUpdateTime = newValue}
  }

  public var burstCache: Bool {
    get {return _storage._burstCache}
    set {_uniqueStorage()._burstCache = newValue}
  }

  public var liveStream: [FormatMap] {
    get {return _storage._liveStream}
    set {_uniqueStorage()._liveStream = newValue}
  }

  public var messages: [FormatMap] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  public var ads: Ads {
    get {return _storage._ads ?? Ads()}
    set {_uniqueStorage()._ads = newValue}
  }
  /// Returns true if `ads` has been explicitly set.
  public var hasAds: Bool {return _storage._ads != nil}
  /// Clears the value of `ads`. Subsequent reads from it will return its default value.
  public mutating func clearAds() {_storage._ads = nil}

  public var cbPlus: [FormatMap] {
    get {return _storage._cbPlus}
    set {_uniqueStorage()._cbPlus = newValue}
  }

  public var appUpdate: [AppUpdate] {
    get {return _storage._appUpdate}
    set {_uniqueStorage()._appUpdate = newValue}
  }

  public var vastTag: String {
    get {return _storage._vastTag}
    set {_uniqueStorage()._vastTag = newValue}
  }

  public var nonMatchAlertsTopics: [FormatMap] {
    get {return _storage._nonMatchAlertsTopics}
    set {_uniqueStorage()._nonMatchAlertsTopics = newValue}
  }

  public var premiumConfigs: PremiumConfigs {
    get {return _storage._premiumConfigs ?? PremiumConfigs()}
    set {_uniqueStorage()._premiumConfigs = newValue}
  }
  /// Returns true if `premiumConfigs` has been explicitly set.
  public var hasPremiumConfigs: Bool {return _storage._premiumConfigs != nil}
  /// Clears the value of `premiumConfigs`. Subsequent reads from it will return its default value.
  public mutating func clearPremiumConfigs() {_storage._premiumConfigs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._refreshRates)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._featureToggles)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._analytics)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._cache)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._videos)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._sponsors)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._lastUpdateTime)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._burstCache)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._liveStream)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._messages)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._ads)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._cbPlus)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._appUpdate)
        case 15: try decoder.decodeSingularStringField(value: &_storage._vastTag)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._nonMatchAlertsTopics)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._premiumConfigs)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._refreshRates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._refreshRates, fieldNumber: 1)
      }
      if !_storage._featureToggles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._featureToggles, fieldNumber: 2)
      }
      if !_storage._analytics.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._analytics, fieldNumber: 3)
      }
      if let v = _storage._cache {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._videos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._videos, fieldNumber: 5)
      }
      if !_storage._sponsors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sponsors, fieldNumber: 6)
      }
      if _storage._lastUpdateTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdateTime, fieldNumber: 7)
      }
      if _storage._burstCache != false {
        try visitor.visitSingularBoolField(value: _storage._burstCache, fieldNumber: 8)
      }
      if !_storage._liveStream.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._liveStream, fieldNumber: 9)
      }
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._messages, fieldNumber: 10)
      }
      if let v = _storage._ads {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._cbPlus.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._cbPlus, fieldNumber: 13)
      }
      if !_storage._appUpdate.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._appUpdate, fieldNumber: 14)
      }
      if !_storage._vastTag.isEmpty {
        try visitor.visitSingularStringField(value: _storage._vastTag, fieldNumber: 15)
      }
      if !_storage._nonMatchAlertsTopics.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._nonMatchAlertsTopics, fieldNumber: 16)
      }
      if let v = _storage._premiumConfigs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Ads: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Ads"

  public var interstial: Interstial {
    get {return _storage._interstial ?? Interstial()}
    set {_uniqueStorage()._interstial = newValue}
  }
  /// Returns true if `interstial` has been explicitly set.
  public var hasInterstial: Bool {return _storage._interstial != nil}
  /// Clears the value of `interstial`. Subsequent reads from it will return its default value.
  public mutating func clearInterstial() {_storage._interstial = nil}

  public var shosh: Shosh {
    get {return _storage._shosh ?? Shosh()}
    set {_uniqueStorage()._shosh = newValue}
  }
  /// Returns true if `shosh` has been explicitly set.
  public var hasShosh: Bool {return _storage._shosh != nil}
  /// Clears the value of `shosh`. Subsequent reads from it will return its default value.
  public mutating func clearShosh() {_storage._shosh = nil}

  public var appopen: AppOpen {
    get {return _storage._appopen ?? AppOpen()}
    set {_uniqueStorage()._appopen = newValue}
  }
  /// Returns true if `appopen` has been explicitly set.
  public var hasAppopen: Bool {return _storage._appopen != nil}
  /// Clears the value of `appopen`. Subsequent reads from it will return its default value.
  public mutating func clearAppopen() {_storage._appopen = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._interstial)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._shosh)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._appopen)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._interstial {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._shosh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._appopen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Shosh: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Shosh"

  public var match: [freq] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.match)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.match.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.match, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Interstial: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Interstial"

  public var news: [freq] = []

  public var match: [freq] = []

  public var app: [freq] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.news)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.match)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.app)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.news.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.news, fieldNumber: 1)
    }
    if !self.match.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.match, fieldNumber: 2)
    }
    if !self.app.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.app, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AppOpen: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AppOpen"

  public var app: [freq] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.app)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.app.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.app, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct freq: SwiftProtobuf.Message {
  public static let protoMessageName: String = "freq"

  public var key: String = String()

  public var value: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularInt32Field(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AppUpdate: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AppUpdate"

  public var key: String = String()

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct PremiumConfigs: SwiftProtobuf.Message {
  public static let protoMessageName: String = "PremiumConfigs"

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Endpoints: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appUrls"),
    2: .same(proto: "modules"),
    3: .same(proto: "imgPath"),
    4: .same(proto: "auth"),
    5: .same(proto: "lastUpdatedTime"),
  ]

  public func _protobuf_generated_isEqualTo(other: Endpoints) -> Bool {
    if self.appUrls != other.appUrls {return false}
    if self.modules != other.modules {return false}
    if self.imgPath != other.imgPath {return false}
    if self.auth != other.auth {return false}
    if self.lastUpdatedTime != other.lastUpdatedTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AuthMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "auth"),
  ]

  fileprivate class _StorageClass {
    var _key: String = String()
    var _auth: Auth? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _auth = source._auth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: AuthMap) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._key != other_storage._key {return false}
        if _storage._auth != other_storage._auth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Auth: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .same(proto: "authType"),
  ]

  public func _protobuf_generated_isEqualTo(other: Auth) -> Bool {
    if self.enabled != other.enabled {return false}
    if self.authType != other.authType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Module: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "version"),
    3: .same(proto: "maxFails"),
    4: .same(proto: "inUse"),
    5: .same(proto: "name"),
  ]

  public func _protobuf_generated_isEqualTo(other: Module) -> Bool {
    if self.uri != other.uri {return false}
    if self.version != other.version {return false}
    if self.maxFails != other.maxFails {return false}
    if self.inUse != other.inUse {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SyncDB: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "epFetch"),
    2: .same(proto: "settingsFetch"),
    3: .same(proto: "lastUpdatedEP"),
    4: .same(proto: "lastUpdatedSettings"),
  ]

  public func _protobuf_generated_isEqualTo(other: SyncDB) -> Bool {
    if self.epFetch != other.epFetch {return false}
    if self.settingsFetch != other.settingsFetch {return false}
    if self.lastUpdatedEp != other.lastUpdatedEp {return false}
    if self.lastUpdatedSettings != other.lastUpdatedSettings {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension RefreshRate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: RefreshRate) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension FeatureToggle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: FeatureToggle) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AnalyticsData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "enabled"),
    3: .same(proto: "id"),
    4: .same(proto: "secret"),
    5: .same(proto: "others"),
  ]

  public func _protobuf_generated_isEqualTo(other: AnalyticsData) -> Bool {
    if self.key != other.key {return false}
    if self.enabled != other.enabled {return false}
    if self.id != other.id {return false}
    if self.secret != other.secret {return false}
    if self.others != other.others {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SponsoredData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "title"),
    3: .same(proto: "link"),
  ]

  public func _protobuf_generated_isEqualTo(other: SponsoredData) -> Bool {
    if self.key != other.key {return false}
    if self.title != other.title {return false}
    if self.link != other.link {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Cache: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "burstCacheId"),
    2: .same(proto: "enableDmp"),
  ]

  public func _protobuf_generated_isEqualTo(other: Cache) -> Bool {
    if self.burstCacheID != other.burstCacheID {return false}
    if self.enableDmp != other.enableDmp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Settings: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "refreshRates"),
    2: .same(proto: "featureToggles"),
    3: .same(proto: "analytics"),
    4: .same(proto: "cache"),
    5: .same(proto: "videos"),
    6: .same(proto: "sponsors"),
    7: .same(proto: "lastUpdateTime"),
    8: .same(proto: "burstCache"),
    9: .same(proto: "liveStream"),
    10: .same(proto: "messages"),
    11: .same(proto: "ads"),
    13: .same(proto: "cbPlus"),
    14: .same(proto: "appUpdate"),
    15: .same(proto: "vastTag"),
    16: .same(proto: "nonMatchAlertsTopics"),
    17: .same(proto: "premiumConfigs"),
  ]

  fileprivate class _StorageClass {
    var _refreshRates: [RefreshRate] = []
    var _featureToggles: [FeatureToggle] = []
    var _analytics: [AnalyticsData] = []
    var _cache: Cache? = nil
    var _videos: [FormatMap] = []
    var _sponsors: [SponsoredData] = []
    var _lastUpdateTime: Int64 = 0
    var _burstCache: Bool = false
    var _liveStream: [FormatMap] = []
    var _messages: [FormatMap] = []
    var _ads: Ads? = nil
    var _cbPlus: [FormatMap] = []
    var _appUpdate: [AppUpdate] = []
    var _vastTag: String = String()
    var _nonMatchAlertsTopics: [FormatMap] = []
    var _premiumConfigs: PremiumConfigs? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _refreshRates = source._refreshRates
      _featureToggles = source._featureToggles
      _analytics = source._analytics
      _cache = source._cache
      _videos = source._videos
      _sponsors = source._sponsors
      _lastUpdateTime = source._lastUpdateTime
      _burstCache = source._burstCache
      _liveStream = source._liveStream
      _messages = source._messages
      _ads = source._ads
      _cbPlus = source._cbPlus
      _appUpdate = source._appUpdate
      _vastTag = source._vastTag
      _nonMatchAlertsTopics = source._nonMatchAlertsTopics
      _premiumConfigs = source._premiumConfigs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Settings) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._refreshRates != other_storage._refreshRates {return false}
        if _storage._featureToggles != other_storage._featureToggles {return false}
        if _storage._analytics != other_storage._analytics {return false}
        if _storage._cache != other_storage._cache {return false}
        if _storage._videos != other_storage._videos {return false}
        if _storage._sponsors != other_storage._sponsors {return false}
        if _storage._lastUpdateTime != other_storage._lastUpdateTime {return false}
        if _storage._burstCache != other_storage._burstCache {return false}
        if _storage._liveStream != other_storage._liveStream {return false}
        if _storage._messages != other_storage._messages {return false}
        if _storage._ads != other_storage._ads {return false}
        if _storage._cbPlus != other_storage._cbPlus {return false}
        if _storage._appUpdate != other_storage._appUpdate {return false}
        if _storage._vastTag != other_storage._vastTag {return false}
        if _storage._nonMatchAlertsTopics != other_storage._nonMatchAlertsTopics {return false}
        if _storage._premiumConfigs != other_storage._premiumConfigs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Ads: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interstial"),
    2: .same(proto: "shosh"),
    3: .same(proto: "appopen"),
  ]

  fileprivate class _StorageClass {
    var _interstial: Interstial? = nil
    var _shosh: Shosh? = nil
    var _appopen: AppOpen? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _interstial = source._interstial
      _shosh = source._shosh
      _appopen = source._appopen
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Ads) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._interstial != other_storage._interstial {return false}
        if _storage._shosh != other_storage._shosh {return false}
        if _storage._appopen != other_storage._appopen {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Shosh: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "match"),
  ]

  public func _protobuf_generated_isEqualTo(other: Shosh) -> Bool {
    if self.match != other.match {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Interstial: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "news"),
    2: .same(proto: "match"),
    3: .same(proto: "app"),
  ]

  public func _protobuf_generated_isEqualTo(other: Interstial) -> Bool {
    if self.news != other.news {return false}
    if self.match != other.match {return false}
    if self.app != other.app {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AppOpen: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "app"),
  ]

  public func _protobuf_generated_isEqualTo(other: AppOpen) -> Bool {
    if self.app != other.app {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension freq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: freq) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AppUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: AppUpdate) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PremiumConfigs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public func _protobuf_generated_isEqualTo(other: PremiumConfigs) -> Bool {
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
